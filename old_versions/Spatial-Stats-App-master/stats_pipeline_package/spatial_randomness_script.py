import numpy as np
import csv
import scipy
import scipy.io as sio
import scipy.spatial
import scipy.stats
import matplotlib.pyplot as plt
import PIL.Image
import PIL.ImageFilter
from math_research.stats_pipeline_package.spatial_randomness_functions_test import spatial_randomness_functions as srf

# Create instance of the functions class
class Private(object):
    pass
p = Private()
p.srf = srf()

# Load the MAT flile generated by the MATLAB app
nuclei_data = sio.loadmat('#34 a2-1 20xthresh0_2.mat')
save_csv = False # Change to True if you want to save the statistics outpu
# print(nuclei_data['Selection'].shape, np.min(nuclei_data['Selection']))


# Get the ROI from the MAT file and convert to non-sparse array if necessary
roi_data = nuclei_data['Selection']
try:
    roi_data = scipy.sparse.csr_matrix.toarray(roi_data)
except:
    pass
#print(roi_data.shape, type(roi_data))
# Convert ROI to an image object
roi_data_img = PIL.Image.fromarray(roi_data*255,'L')

# Compute the ROI mask and border
# compute_roi_mask_and_border(ROI_image_object, intensity_threshold, blob_count_threshold)
mask, border = p.srf.compute_roi_mask_and_border(roi_data_img, 150, 1000)

# Debugging
# roi_array = p.srf.cartesian_to_array(roi_data,(mask.shape))
# np.mean(np.min(cdist(array_to_cartesian(data['Nuclei_Centers']), array_to_cartesian(border)), axis=1))
# compute_mean_nuclei_center_dist_to_border(array_to_cartesian(data['Nuclei_Centers']), array_to_cartesian(border))

# Get nuclei centers from MAT file
nuclei_centers = nuclei_data['Nuclei_Dendritic']
print('Total number of cells initially', np.sum(nuclei_centers))

# Calculate real nuclei statistics: distance to epithelium, and nearest neighbor
cell_ep_dist_mean, cell_ep_dist_data = p.srf.compute_mean_nuclei_center_dist_to_border(p.srf.array_to_cartesian(nuclei_centers), p.srf.array_to_cartesian(border))
# compute_mean_nuclei_center_dist_to_border(nuclei_centers, ROI_border) Arguments must be in cartesian.
print('Calculated real DC distance to epithelium.')
cell_nuc_dist_mean, cell_nuc_dist_data = p.srf.compute_mean_min_nuclei_center_dist(p.srf.array_to_cartesian(nuclei_centers))
# compute_mean_min_nuclei_center_dist(nuclei_centers) Argument must be in cartesian.
print('Calculated real DC dist to nearest neighbor.')

# Debugging
# np.set_printoptions(threshold=np.inf)
# print(data['Nuclei_Centers'])


# Plotting #################################################################################################################################

# Uncomment block to show found nuclei centers from MATLAB code
# nuclei_cent_img = PIL.Image.fromarray(nuclei_centers*255,'L')
# nuclei_cent_img.show()

# Uncomment block to show ROI border
# border_img = PIL.Image.fromarray(border*255,'L')
# border_img.show()

# Uncomment block to show ROI mask
# mask_img = PIL.Image.fromarray(mask*128,'L')
# mask_img.show()

# Uncomment block to show ROI mask and found nuclei centers from MATLAB overlayed
# mask_and_nuc = mask*127+nuclei_centers*128
# mask_and_nuc_img = PIL.Image.fromarray(mask_and_nuc)
# mask_and_nuc_img.show(title='Real Data')

# print("data", cell_dist_data, len(cell_dist_data), cell_dist_mean, max(cell_dist_data))
##########################################################################################################################################

# Run simulations and get simulation data
# perform_border_bootstrap_test(nuclie_centers, ROI_image_object, intensity_threshold, blob_count_threshold, number_of_desired_simulations)
sim_ep_dist = p.srf.perform_border_bootstrap_test(nuclei_centers, roi_data_img, 150, 1000, 10, plot_num=1) #plot_num=n plots n simulations
# perform_nuclei_bootstrap_test(nuclie_centers, ROI_image_object, intensity_threshold, blob_count_threshold, number_of_desired_simulations)
sim_nuc_dist = p.srf.perform_nuclei_bootstrap_test(nuclei_centers, roi_data_img, 150, 1000, 10, plot_num=1)

# Real Data
cell_ep_dist_data = np.sort(cell_ep_dist_data, axis=None) #distance to epithelium
cell_nuc_dist_data = np.sort(cell_nuc_dist_data, axis=None) #distance to nearest neighbor

# simulated Data
# sim_ep_dist = np.array(sim_ep_dist)
# sim_ep_dist = np.sort(sim_ep_dist, axis=None) #distance to epithelium
# sim_nuc_dist = np.array(sim_nuc_dist)
# sim_nuc_dist = np.sort(sim_nuc_dist, axis=None) #distance to nearest neighbor
# print(sim_ep_dist)

# #Some X^2 test information
# ep_dist_chi_square_arr =  np.array([cell_ep_dist_data+1, sim_ep_dist+1])
# ep_dist_chi_2, ep_dist_p_val, ep_dist_d_o_f, ep_expected_frequencies = scipy.stats.chi2_contingency(ep_dist_chi_square_arr)
# print(ep_dist_chi_2, ep_dist_p_val, ep_dist_d_o_f)

# nuc_dist_chi_square_arr =  np.array([cell_nuc_dist_data+1, sim_nuc_dist+1])
# nuc_dist_chi_2, nuc_dist_p_val, nuc_dist_d_o_f, nuc_expected_frequencies = scipy.stats.chi2_contingency(nuc_dist_chi_square_arr)
# print(nuc_dist_chi_2, nuc_dist_p_val, nuc_dist_d_o_f)
# x.append(nuc_dist_p_val)

# plt.hist(x, label='p_value from X^2 Test of Nuclei to Nearest Neighbor')
# plt.title('Distribution of p-values from X^2 Test of Nuclei to Nearest Neighbor')
# plt.show()

bins = np.linspace(0,1000,num=100)

# Save the raw statistics output as a CSV
if save_csv == True:
    np.savetxt("real_cell_ep_dist.csv", cell_ep_dist_data) # Save real DC nuclei to epithelium distances.
    print('Real Epithelium Dist:', max(cell_ep_dist_data), min(cell_ep_dist_data), np.mean(cell_ep_dist_data))
    np.savetxt("sim_cell_ep_dist.csv", sim_ep_dist) # Save simulated DC nuclei to epithelium distances.
    print('Simulated Epithelium Dist:',max(sim_ep_dist), min(sim_ep_dist), np.mean(sim_ep_dist))

    np.savetxt("real_cell_nuc_dist.csv", cell_nuc_dist_data) # Save real DC nuclei to nearest neighbor distances.
    print('Real Nearest Neighbor Dist:',max(cell_nuc_dist_data), min(cell_nuc_dist_data), np.mean(cell_nuc_dist_data))
    np.savetxt("sim_cell_nuc_dist.csv", sim_nuc_dist) # Save real DC nuclei to nearest neighbor distances.
    print('SImulated Nearest Neighbor Dist:',max(sim_nuc_dist), min(sim_nuc_dist), np.mean(sim_nuc_dist))


# Plot the Real Data and Simulated data in relative count histograms
# Epithelium distance
plt.hist(cell_ep_dist_data, density=True, bins=bins,label='Real Data', alpha=0.5)
plt.hist(sim_ep_dist, density=True, bins=bins, label='Simulated Data', alpha=0.5)
plt.title('Distance of Each DC Nuclei to Epithelium')
plt.ylabel('Relative Counts')
plt.xlabel('Distance to Epithelium (pxl)')
plt.xlim(0,120)
plt.legend()
plt.show()
# Nearest neighbor distance
plt.hist(cell_nuc_dist_data, density=True, bins=bins,label='Real Data', alpha=0.5)
plt.hist(sim_nuc_dist, density=True, bins=bins, label='Simulated Data', alpha=0.5)
plt.title('Distance of Each DC Nuclei to Nearest Neighbor')
plt.ylabel('Relative Counts')
plt.xlabel('Distance to Nearest Neighbor (pxl)')
plt.xlim(0,400)
plt.legend()
plt.show()

print(np.mean(cell_nuc_dist_data))